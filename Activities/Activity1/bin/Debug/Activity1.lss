
bin\Debug\Activity1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000195  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000038  00000000  00000000  000001b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000124  00000000  00000000  000001ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000b4  00000000  00000000  00000311  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000115  00000000  00000000  000003c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a2  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>

int main(void)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62

DDRB|=(1<<PB0);
  88:	a4 e2       	ldi	r26, 0x24	; 36
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e4 e2       	ldi	r30, 0x24	; 36
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	81 60       	ori	r24, 0x01	; 1
  94:	8c 93       	st	X, r24
DDRB&=~(1<<PB6); //clear bit
  96:	a4 e2       	ldi	r26, 0x24	; 36
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e4 e2       	ldi	r30, 0x24	; 36
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	8f 7b       	andi	r24, 0xBF	; 191
  a2:	8c 93       	st	X, r24
PORTB|=(1<<PB6); //Set bit
  a4:	a5 e2       	ldi	r26, 0x25	; 37
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e5 e2       	ldi	r30, 0x25	; 37
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	8c 93       	st	X, r24
DDRB&=~(1<<PB7); //clear bit
  b2:	a4 e2       	ldi	r26, 0x24	; 36
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e4 e2       	ldi	r30, 0x24	; 36
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8f 77       	andi	r24, 0x7F	; 127
  be:	8c 93       	st	X, r24
PORTB|=(1<<PB7);//Set bit
  c0:	a5 e2       	ldi	r26, 0x25	; 37
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	e5 e2       	ldi	r30, 0x25	; 37
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	8c 93       	st	X, r24
    while(1)
    {
        if(!(PINB&(1<<PB7))){
  ce:	e3 e2       	ldi	r30, 0x23	; 35
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 23       	and	r24, r24
  d6:	cc f0       	brlt	.+50     	; 0x10a <main+0x8a>

            if(!(PINB&(1<<PB6)))
  d8:	e3 e2       	ldi	r30, 0x23	; 35
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 2f       	mov	r24, r24
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	80 74       	andi	r24, 0x40	; 64
  e4:	90 70       	andi	r25, 0x00	; 0
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	41 f4       	brne	.+16     	; 0xfa <main+0x7a>
            {
                PORTB|=(1<<PB0);
  ea:	a5 e2       	ldi	r26, 0x25	; 37
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	e5 e2       	ldi	r30, 0x25	; 37
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	8c 93       	st	X, r24
  f8:	ea cf       	rjmp	.-44     	; 0xce <main+0x4e>
            }
            else
            {
                PORTB&=~(1<<PB0);
  fa:	a5 e2       	ldi	r26, 0x25	; 37
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	e5 e2       	ldi	r30, 0x25	; 37
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	8c 93       	st	X, r24
 108:	e2 cf       	rjmp	.-60     	; 0xce <main+0x4e>
            }
        }
        else
        {
                PORTB&=~(1<<PB0);
 10a:	a5 e2       	ldi	r26, 0x25	; 37
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e5 e2       	ldi	r30, 0x25	; 37
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8e 7f       	andi	r24, 0xFE	; 254
 116:	8c 93       	st	X, r24
 118:	da cf       	rjmp	.-76     	; 0xce <main+0x4e>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
